
PW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002664  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00002664  000026d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d34  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c28  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009061  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000982f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5f 0c 	call	0x18be	; 0x18be <main>
      7a:	0c 94 30 13 	jmp	0x2660	; 0x2660 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ee       	ldi	r26, 0xE3	; 227
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 ee       	ldi	r24, 0xE3	; 227
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_Interface.h"
#include "CLCD_Private.h"

/*Send commands*/
void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
		/*set RS pin low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
		/*set RW pin LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
		/*Command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_u8SetPortValue>

		/*enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>

}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

/*Send Data*/
void CLCD_voidSendData(u8 Copy_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*HIGH for send data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
	/*set RW pin LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
		/*Send Data For PINS*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_u8SetPortValue>

		/*enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_init>:

/*Initialization*/
void CLCD_init(void)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	6c 97       	sbiw	r28, 0x1c	; 28
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e2       	ldi	r26, 0x20	; 32
     dc8:	b2 e4       	ldi	r27, 0x42	; 66
     dca:	89 8f       	std	Y+25, r24	; 0x19
     dcc:	9a 8f       	std	Y+26, r25	; 0x1a
     dce:	ab 8f       	std	Y+27, r26	; 0x1b
     dd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	69 8d       	ldd	r22, Y+25	; 0x19
     dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a ef       	ldi	r20, 0xFA	; 250
     de0:	54 e4       	ldi	r21, 0x44	; 68
     de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8d 8b       	std	Y+21, r24	; 0x15
     dec:	9e 8b       	std	Y+22, r25	; 0x16
     dee:	af 8b       	std	Y+23, r26	; 0x17
     df0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     df2:	6d 89       	ldd	r22, Y+21	; 0x15
     df4:	7e 89       	ldd	r23, Y+22	; 0x16
     df6:	8f 89       	ldd	r24, Y+23	; 0x17
     df8:	98 8d       	ldd	r25, Y+24	; 0x18
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	2c f4       	brge	.+10     	; 0xe14 <CLCD_init+0x66>
		__ticks = 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <CLCD_init+0xe4>
	else if (__tmp > 65535)
     e14:	6d 89       	ldd	r22, Y+21	; 0x15
     e16:	7e 89       	ldd	r23, Y+22	; 0x16
     e18:	8f 89       	ldd	r24, Y+23	; 0x17
     e1a:	98 8d       	ldd	r25, Y+24	; 0x18
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	4c f5       	brge	.+82     	; 0xe7e <CLCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2c:	69 8d       	ldd	r22, Y+25	; 0x19
     e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9c 8b       	std	Y+20, r25	; 0x14
     e52:	8b 8b       	std	Y+19, r24	; 0x13
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <CLCD_init+0xc6>
     e56:	88 ec       	ldi	r24, 0xC8	; 200
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9a 8b       	std	Y+18, r25	; 0x12
     e5c:	89 8b       	std	Y+17, r24	; 0x11
     e5e:	89 89       	ldd	r24, Y+17	; 0x11
     e60:	9a 89       	ldd	r25, Y+18	; 0x12
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <CLCD_init+0xb4>
     e66:	9a 8b       	std	Y+18, r25	; 0x12
     e68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6a:	8b 89       	ldd	r24, Y+19	; 0x13
     e6c:	9c 89       	ldd	r25, Y+20	; 0x14
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	9c 8b       	std	Y+20, r25	; 0x14
     e72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f7       	brne	.-38     	; 0xe56 <CLCD_init+0xa8>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <CLCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	6d 89       	ldd	r22, Y+21	; 0x15
     e80:	7e 89       	ldd	r23, Y+22	; 0x16
     e82:	8f 89       	ldd	r24, Y+23	; 0x17
     e84:	98 8d       	ldd	r25, Y+24	; 0x18
     e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
     e90:	8b 8b       	std	Y+19, r24	; 0x13
     e92:	8b 89       	ldd	r24, Y+19	; 0x13
     e94:	9c 89       	ldd	r25, Y+20	; 0x14
     e96:	98 8b       	std	Y+16, r25	; 0x10
     e98:	8f 87       	std	Y+15, r24	; 0x0f
     e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9c:	98 89       	ldd	r25, Y+16	; 0x10
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <CLCD_init+0xf0>
     ea2:	98 8b       	std	Y+16, r25	; 0x10
     ea4:	8f 87       	std	Y+15, r24	; 0x0f
	/*Wait for more than 30ms */
	_delay_ms(40);

	/*Function Set Command : 2 Lines, 8*5 Font size*/
	CLCD_voidSendCommand(0b00111000);
     ea6:	88 e3       	ldi	r24, 0x38	; 56
     ea8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Display on/off control:	display enable , disable cursor , no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     eac:	8c e0       	ldi	r24, 0x0C	; 12
     eae:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Clear Display*/
	CLCD_voidSendCommand(1);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e4       	ldi	r27, 0x40	; 64
     ec0:	8b 87       	std	Y+11, r24	; 0x0b
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	ad 87       	std	Y+13, r26	; 0x0d
     ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a ef       	ldi	r20, 0xFA	; 250
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	a9 87       	std	Y+9, r26	; 0x09
     ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <CLCD_init+0x15c>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <CLCD_init+0x1da>
	else if (__tmp > 65535)
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <CLCD_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	6b 85       	ldd	r22, Y+11	; 0x0b
     f24:	7c 85       	ldd	r23, Y+12	; 0x0c
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <CLCD_init+0x1bc>
     f4c:	88 ec       	ldi	r24, 0xC8	; 200
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <CLCD_init+0x1aa>
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <CLCD_init+0x19e>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <CLCD_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6f 81       	ldd	r22, Y+7	; 0x07
     f76:	78 85       	ldd	r23, Y+8	; 0x08
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <CLCD_init+0x1e6>
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/*Initialize LCD Pins Direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	6f ef       	ldi	r22, 0xFF	; 255
     fa0:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PORT_OUTPUT);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	4f ef       	ldi	r20, 0xFF	; 255
     faa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PORT_OUTPUT);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	4f ef       	ldi	r20, 0xFF	; 255
     fb4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PORT_OUTPUT);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	4f ef       	ldi	r20, 0xFF	; 255
     fbe:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_u8SetPinDirection>
}
     fc2:	6c 96       	adiw	r28, 0x1c	; 28
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <CLCD_voidSendString+0x6>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	8a 83       	std	Y+2, r24	; 0x02
	s8 i=0;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	10 c0       	rjmp	.+32     	; 0x1008 <CLCD_voidSendString+0x34>
	while(Copy_pcString[i]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[i]);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	33 27       	eor	r19, r19
     fee:	27 fd       	sbrc	r18, 7
     ff0:	30 95       	com	r19
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	80 81       	ld	r24, Z
     ffe:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		i++;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	s8 i=0;
	while(Copy_pcString[i]!='\0')
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	33 27       	eor	r19, r19
    100e:	27 fd       	sbrc	r18, 7
    1010:	30 95       	com	r19
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	9b 81       	ldd	r25, Y+3	; 0x03
    1016:	fc 01       	movw	r30, r24
    1018:	e2 0f       	add	r30, r18
    101a:	f3 1f       	adc	r31, r19
    101c:	80 81       	ld	r24, Z
    101e:	88 23       	and	r24, r24
    1020:	19 f7       	brne	.-58     	; 0xfe8 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[i]);
		i++;
	}
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <CLCD_voidGoToXY+0x6>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (Copy_u8XPos==0)
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 23       	and	r24, r24
    1042:	19 f4       	brne	.+6      	; 0x104a <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8XPos==1)
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	19 f4       	brne	.+6      	; 0x1056 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=0x40 + Copy_u8YPos;
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	80 5c       	subi	r24, 0xC0	; 192
    1054:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+128);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	80 58       	subi	r24, 0x80	; 128
    105a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <CLCD_voidSendSpecialChar>:

void CLCD_voidSendSpecialChar(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber ,u8 Copy_u8XPos ,u8 Copy_u8YPos)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	27 97       	sbiw	r28, 0x07	; 7
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	6d 83       	std	Y+5, r22	; 0x05
    1084:	4e 83       	std	Y+6, r20	; 0x06
    1086:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
    1088:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate CGRAM Address Whose each block equal 8 bytes*/
	Local_u8CGRAMAddress =Copy_u8PatternNumber;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 5c       	subi	r24, 0xC0	; 192
    1092:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <CLCD_voidSendSpecialChar+0x4c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	fc 01       	movw	r30, r24
    10a6:	e2 0f       	add	r30, r18
    10a8:	f3 1f       	adc	r31, r19
    10aa:	80 81       	ld	r24, Z
    10ac:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM*/
	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	78 f3       	brcs	.-34     	; 0x109a <CLCD_voidSendSpecialChar+0x30>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	6f 81       	ldd	r22, Y+7	; 0x07
    10c0:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidGoToXY>

	/*Display the pattern written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
}
    10ca:	27 96       	adiw	r28, 0x07	; 7
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <CLCD_voidDisplayClear>:

void CLCD_voidDisplayClear(void)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_u8_CLR_DISPLAY);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	28 97       	sbiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	6b 83       	std	Y+3, r22	; 0x03
    1108:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    110a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	08 f0       	brcs	.+2      	; 0x1114 <DIO_u8SetPinDirection+0x24>
    1112:	f4 c0       	rjmp	.+488    	; 0x12fc <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <DIO_u8SetPinDirection+0x2c>
    111a:	77 c0       	rjmp	.+238    	; 0x120a <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	38 87       	std	Y+8, r19	; 0x08
    1124:	2f 83       	std	Y+7, r18	; 0x07
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	59 f1       	breq	.+86     	; 0x1186 <DIO_u8SetPinDirection+0x96>
    1130:	2f 81       	ldd	r18, Y+7	; 0x07
    1132:	38 85       	ldd	r19, Y+8	; 0x08
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <DIO_u8SetPinDirection+0x54>
    113a:	8f 81       	ldd	r24, Y+7	; 0x07
    113c:	98 85       	ldd	r25, Y+8	; 0x08
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f0       	breq	.+26     	; 0x115c <DIO_u8SetPinDirection+0x6c>
    1142:	60 c0       	rjmp	.+192    	; 0x1204 <DIO_u8SetPinDirection+0x114>
    1144:	2f 81       	ldd	r18, Y+7	; 0x07
    1146:	38 85       	ldd	r19, Y+8	; 0x08
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	89 f1       	breq	.+98     	; 0x11b0 <DIO_u8SetPinDirection+0xc0>
    114e:	8f 81       	ldd	r24, Y+7	; 0x07
    1150:	98 85       	ldd	r25, Y+8	; 0x08
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_u8SetPinDirection+0x6a>
    1158:	40 c0       	rjmp	.+128    	; 0x11da <DIO_u8SetPinDirection+0xea>
    115a:	54 c0       	rjmp	.+168    	; 0x1204 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    115c:	aa e3       	ldi	r26, 0x3A	; 58
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8SetPinDirection+0x8a>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_u8SetPinDirection+0x86>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	bd c0       	rjmp	.+378    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_u8SetPinDirection+0xb4>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_u8SetPinDirection+0xb0>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	a8 c0       	rjmp	.+336    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinDirection+0xde>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinDirection+0xda>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	93 c0       	rjmp	.+294    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    11da:	a1 e3       	ldi	r26, 0x31	; 49
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8SetPinDirection+0x108>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8SetPinDirection+0x104>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	7e c0       	rjmp	.+252    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	7b c0       	rjmp	.+246    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	09 f0       	breq	.+2      	; 0x1212 <DIO_u8SetPinDirection+0x122>
    1210:	72 c0       	rjmp	.+228    	; 0x12f6 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3e 83       	std	Y+6, r19	; 0x06
    121a:	2d 83       	std	Y+5, r18	; 0x05
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	49 f1       	breq	.+82     	; 0x1278 <DIO_u8SetPinDirection+0x188>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	2c f4       	brge	.+10     	; 0x123a <DIO_u8SetPinDirection+0x14a>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 f0       	breq	.+24     	; 0x1250 <DIO_u8SetPinDirection+0x160>
    1238:	5b c0       	rjmp	.+182    	; 0x12f0 <DIO_u8SetPinDirection+0x200>
    123a:	2d 81       	ldd	r18, Y+5	; 0x05
    123c:	3e 81       	ldd	r19, Y+6	; 0x06
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	71 f1       	breq	.+92     	; 0x12a0 <DIO_u8SetPinDirection+0x1b0>
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	e9 f1       	breq	.+122    	; 0x12c8 <DIO_u8SetPinDirection+0x1d8>
    124e:	50 c0       	rjmp	.+160    	; 0x12f0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1250:	aa e3       	ldi	r26, 0x3A	; 58
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ea e3       	ldi	r30, 0x3A	; 58
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8SetPinDirection+0x17e>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8SetPinDirection+0x17a>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	44 c0       	rjmp	.+136    	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8SetPinDirection+0x1a6>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8SetPinDirection+0x1a2>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	30 c0       	rjmp	.+96     	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    12a0:	a4 e3       	ldi	r26, 0x34	; 52
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e4 e3       	ldi	r30, 0x34	; 52
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8SetPinDirection+0x1ce>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8SetPinDirection+0x1ca>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	1c c0       	rjmp	.+56     	; 0x1300 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    12c8:	a1 e3       	ldi	r26, 0x31	; 49
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8SetPinDirection+0x1f6>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8SetPinDirection+0x1f2>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
}
    1302:	28 96       	adiw	r28, 0x08	; 8
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_u8SetPortDirection+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_u8SetPortDirection+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	8a 83       	std	Y+2, r24	; 0x02
    1324:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1326:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3d 83       	std	Y+5, r19	; 0x05
    1330:	2c 83       	std	Y+4, r18	; 0x04
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	d1 f0       	breq	.+52     	; 0x1370 <DIO_u8SetPortDirection+0x5c>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <DIO_u8SetPortDirection+0x3c>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <DIO_u8SetPortDirection+0x52>
    134e:	1f c0       	rjmp	.+62     	; 0x138e <DIO_u8SetPortDirection+0x7a>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	81 f0       	breq	.+32     	; 0x137a <DIO_u8SetPortDirection+0x66>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <DIO_u8SetPortDirection+0x70>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	80 83       	st	Z, r24
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1370:	e7 e3       	ldi	r30, 0x37	; 55
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	80 83       	st	Z, r24
    1378:	0c c0       	rjmp	.+24     	; 0x1392 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    137a:	e4 e3       	ldi	r30, 0x34	; 52
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	80 83       	st	Z, r24
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	80 83       	st	Z, r24
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	28 97       	sbiw	r28, 0x08	; 8
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	6b 83       	std	Y+3, r22	; 0x03
    13bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    13be:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <DIO_u8SetPinValue+0x24>
    13c6:	f4 c0       	rjmp	.+488    	; 0x15b0 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	88 23       	and	r24, r24
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <DIO_u8SetPinValue+0x2c>
    13ce:	77 c0       	rjmp	.+238    	; 0x14be <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	38 87       	std	Y+8, r19	; 0x08
    13d8:	2f 83       	std	Y+7, r18	; 0x07
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	59 f1       	breq	.+86     	; 0x143a <DIO_u8SetPinValue+0x96>
    13e4:	2f 81       	ldd	r18, Y+7	; 0x07
    13e6:	38 85       	ldd	r19, Y+8	; 0x08
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_u8SetPinValue+0x54>
    13ee:	8f 81       	ldd	r24, Y+7	; 0x07
    13f0:	98 85       	ldd	r25, Y+8	; 0x08
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f0       	breq	.+26     	; 0x1410 <DIO_u8SetPinValue+0x6c>
    13f6:	60 c0       	rjmp	.+192    	; 0x14b8 <DIO_u8SetPinValue+0x114>
    13f8:	2f 81       	ldd	r18, Y+7	; 0x07
    13fa:	38 85       	ldd	r19, Y+8	; 0x08
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	89 f1       	breq	.+98     	; 0x1464 <DIO_u8SetPinValue+0xc0>
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_u8SetPinValue+0x6a>
    140c:	40 c0       	rjmp	.+128    	; 0x148e <DIO_u8SetPinValue+0xea>
    140e:	54 c0       	rjmp	.+168    	; 0x14b8 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1410:	ab e3       	ldi	r26, 0x3B	; 59
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8SetPinValue+0x8a>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8SetPinValue+0x86>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	bd c0       	rjmp	.+378    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8SetPinValue+0xb4>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8SetPinValue+0xb0>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	a8 c0       	rjmp	.+336    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1464:	a5 e3       	ldi	r26, 0x35	; 53
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_u8SetPinValue+0xde>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_u8SetPinValue+0xda>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	93 c0       	rjmp	.+294    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8SetPinValue+0x108>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8SetPinValue+0x104>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	7e c0       	rjmp	.+252    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	7b c0       	rjmp	.+246    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <DIO_u8SetPinValue+0x122>
    14c4:	72 c0       	rjmp	.+228    	; 0x15aa <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3e 83       	std	Y+6, r19	; 0x06
    14ce:	2d 83       	std	Y+5, r18	; 0x05
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	49 f1       	breq	.+82     	; 0x152c <DIO_u8SetPinValue+0x188>
    14da:	2d 81       	ldd	r18, Y+5	; 0x05
    14dc:	3e 81       	ldd	r19, Y+6	; 0x06
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <DIO_u8SetPinValue+0x14a>
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	61 f0       	breq	.+24     	; 0x1504 <DIO_u8SetPinValue+0x160>
    14ec:	5b c0       	rjmp	.+182    	; 0x15a4 <DIO_u8SetPinValue+0x200>
    14ee:	2d 81       	ldd	r18, Y+5	; 0x05
    14f0:	3e 81       	ldd	r19, Y+6	; 0x06
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	71 f1       	breq	.+92     	; 0x1554 <DIO_u8SetPinValue+0x1b0>
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	e9 f1       	breq	.+122    	; 0x157c <DIO_u8SetPinValue+0x1d8>
    1502:	50 c0       	rjmp	.+160    	; 0x15a4 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8SetPinValue+0x17e>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8SetPinValue+0x17a>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	44 c0       	rjmp	.+136    	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    152c:	a8 e3       	ldi	r26, 0x38	; 56
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e3       	ldi	r30, 0x38	; 56
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_u8SetPinValue+0x1a6>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_u8SetPinValue+0x1a2>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	30 c0       	rjmp	.+96     	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1554:	a5 e3       	ldi	r26, 0x35	; 53
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e3       	ldi	r30, 0x35	; 53
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_u8SetPinValue+0x1ce>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_u8SetPinValue+0x1ca>
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	1c c0       	rjmp	.+56     	; 0x15b4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    157c:	a2 e3       	ldi	r26, 0x32	; 50
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e2 e3       	ldi	r30, 0x32	; 50
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8SetPinValue+0x1f6>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8SetPinValue+0x1f2>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	28 96       	adiw	r28, 0x08	; 8
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_u8SetPortValue+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <DIO_u8SetPortValue+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    15da:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3d 83       	std	Y+5, r19	; 0x05
    15e4:	2c 83       	std	Y+4, r18	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <DIO_u8SetPortValue+0x5c>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_u8SetPortValue+0x3c>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_u8SetPortValue+0x52>
    1602:	1f c0       	rjmp	.+62     	; 0x1642 <DIO_u8SetPortValue+0x7a>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <DIO_u8SetPortValue+0x66>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_u8SetPortValue+0x70>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	80 83       	st	Z, r24
    1622:	11 c0       	rjmp	.+34     	; 0x1646 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1624:	e8 e3       	ldi	r30, 0x38	; 56
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	80 83       	st	Z, r24
    162c:	0c c0       	rjmp	.+24     	; 0x1646 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	80 83       	st	Z, r24
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	80 83       	st	Z, r24
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	27 97       	sbiw	r28, 0x07	; 7
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	6b 83       	std	Y+3, r22	; 0x03
    1670:	5d 83       	std	Y+5, r21	; 0x05
    1672:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1674:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	09 f4       	brne	.+2      	; 0x1680 <DIO_u8GetPinValue+0x28>
    167e:	78 c0       	rjmp	.+240    	; 0x1770 <DIO_u8GetPinValue+0x118>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 30       	cpi	r24, 0x08	; 8
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_u8GetPinValue+0x30>
    1686:	74 c0       	rjmp	.+232    	; 0x1770 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3f 83       	std	Y+7, r19	; 0x07
    1690:	2e 83       	std	Y+6, r18	; 0x06
    1692:	4e 81       	ldd	r20, Y+6	; 0x06
    1694:	5f 81       	ldd	r21, Y+7	; 0x07
    1696:	41 30       	cpi	r20, 0x01	; 1
    1698:	51 05       	cpc	r21, r1
    169a:	59 f1       	breq	.+86     	; 0x16f2 <DIO_u8GetPinValue+0x9a>
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	91 05       	cpc	r25, r1
    16a4:	34 f4       	brge	.+12     	; 0x16b2 <DIO_u8GetPinValue+0x5a>
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	69 f0       	breq	.+26     	; 0x16ca <DIO_u8GetPinValue+0x72>
    16b0:	5c c0       	rjmp	.+184    	; 0x176a <DIO_u8GetPinValue+0x112>
    16b2:	4e 81       	ldd	r20, Y+6	; 0x06
    16b4:	5f 81       	ldd	r21, Y+7	; 0x07
    16b6:	42 30       	cpi	r20, 0x02	; 2
    16b8:	51 05       	cpc	r21, r1
    16ba:	79 f1       	breq	.+94     	; 0x171a <DIO_u8GetPinValue+0xc2>
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <DIO_u8GetPinValue+0x70>
    16c6:	3d c0       	rjmp	.+122    	; 0x1742 <DIO_u8GetPinValue+0xea>
    16c8:	50 c0       	rjmp	.+160    	; 0x176a <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    16ca:	e9 e3       	ldi	r30, 0x39	; 57
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_u8GetPinValue+0x8a>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_u8GetPinValue+0x86>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	ec 81       	ldd	r30, Y+4	; 0x04
    16ec:	fd 81       	ldd	r31, Y+5	; 0x05
    16ee:	80 83       	st	Z, r24
    16f0:	41 c0       	rjmp	.+130    	; 0x1774 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    16f2:	e6 e3       	ldi	r30, 0x36	; 54
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a9 01       	movw	r20, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_u8GetPinValue+0xb2>
    1706:	55 95       	asr	r21
    1708:	47 95       	ror	r20
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_u8GetPinValue+0xae>
    170e:	ca 01       	movw	r24, r20
    1710:	81 70       	andi	r24, 0x01	; 1
    1712:	ec 81       	ldd	r30, Y+4	; 0x04
    1714:	fd 81       	ldd	r31, Y+5	; 0x05
    1716:	80 83       	st	Z, r24
    1718:	2d c0       	rjmp	.+90     	; 0x1774 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    171a:	e3 e3       	ldi	r30, 0x33	; 51
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a9 01       	movw	r20, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_u8GetPinValue+0xda>
    172e:	55 95       	asr	r21
    1730:	47 95       	ror	r20
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_u8GetPinValue+0xd6>
    1736:	ca 01       	movw	r24, r20
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	ec 81       	ldd	r30, Y+4	; 0x04
    173c:	fd 81       	ldd	r31, Y+5	; 0x05
    173e:	80 83       	st	Z, r24
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    1742:	e0 e3       	ldi	r30, 0x30	; 48
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_u8GetPinValue+0x102>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_u8GetPinValue+0xfe>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	ec 81       	ldd	r30, Y+4	; 0x04
    1764:	fd 81       	ldd	r31, Y+5	; 0x05
    1766:	80 83       	st	Z, r24
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
}
    1776:	27 96       	adiw	r28, 0x07	; 7
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <Local_u8GetPressedKey>:
#include "KPD_Config.h"
#include "KPD_Interface.h"
#include "KPD_private.h"

u8 Local_u8GetPressedKey(void)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <Local_u8GetPressedKey+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <Local_u8GetPressedKey+0x8>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY , Local_u8COLUMNIdx, Local_u8ROWIdx, Local_u8PinState;
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8COLUMNIdx=0;Local_u8COLUMNIdx<COLUMN_NUM;Local_u8COLUMNIdx++)
    179a:	1a 82       	std	Y+2, r1	; 0x02
    179c:	5e c0       	rjmp	.+188    	; 0x185a <Local_u8GetPressedKey+0xd2>
	{
		/*Activate Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8COLUMNIdx],DIO_u8PIN_LOW);
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	fc 01       	movw	r30, r24
    17a6:	e1 51       	subi	r30, 0x11	; 17
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	90 81       	ld	r25, Z
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	69 2f       	mov	r22, r25
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>

		for(Local_u8ROWIdx=0;Local_u8ROWIdx<ROW_NUM;Local_u8ROWIdx++)
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	3d c0       	rjmp	.+122    	; 0x1834 <Local_u8GetPressedKey+0xac>
		{
			/*Read Current Row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8ROWIdx],&Local_u8PinState);
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	e5 51       	subi	r30, 0x15	; 21
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	90 81       	ld	r25, Z
    17c8:	9e 01       	movw	r18, r28
    17ca:	2c 5f       	subi	r18, 0xFC	; 252
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	69 2f       	mov	r22, r25
    17d2:	a9 01       	movw	r20, r18
    17d4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_u8GetPinValue>

			/*Check if Key is Pressed*/
			if (DIO_u8PIN_LOW==Local_u8PinState)
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	88 23       	and	r24, r24
    17dc:	41 f5       	brne	.+80     	; 0x182e <Local_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_KPDArr[Local_u8ROWIdx][Local_u8COLUMNIdx];
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	48 2f       	mov	r20, r24
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	ca 01       	movw	r24, r20
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	82 0f       	add	r24, r18
    17f6:	93 1f       	adc	r25, r19
    17f8:	fc 01       	movw	r30, r24
    17fa:	ed 50       	subi	r30, 0x0D	; 13
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	8b 83       	std	Y+3, r24	; 0x03
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <Local_u8GetPressedKey+0x9a>
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8ROWIdx],&Local_u8PinState);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	fc 01       	movw	r30, r24
    180c:	e5 51       	subi	r30, 0x15	; 21
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	90 81       	ld	r25, Z
    1812:	9e 01       	movw	r18, r28
    1814:	2c 5f       	subi	r18, 0xFC	; 252
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	69 2f       	mov	r22, r25
    181c:	a9 01       	movw	r20, r18
    181e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_u8GetPinValue>

			/*Check if Key is Pressed*/
			if (DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey=Local_KPDArr[Local_u8ROWIdx][Local_u8COLUMNIdx];
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	88 23       	and	r24, r24
    1826:	71 f3       	breq	.-36     	; 0x1804 <Local_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8ROWIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	1c c0       	rjmp	.+56     	; 0x1866 <Local_u8GetPressedKey+0xde>
	for(Local_u8COLUMNIdx=0;Local_u8COLUMNIdx<COLUMN_NUM;Local_u8COLUMNIdx++)
	{
		/*Activate Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8COLUMNIdx],DIO_u8PIN_LOW);

		for(Local_u8ROWIdx=0;Local_u8ROWIdx<ROW_NUM;Local_u8ROWIdx++)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f4       	brcc	.+2      	; 0x183c <Local_u8GetPressedKey+0xb4>
    183a:	bf cf       	rjmp	.-130    	; 0x17ba <Local_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8COLUMNIdx],DIO_u8PIN_HIGH);
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	fc 01       	movw	r30, r24
    1844:	e1 51       	subi	r30, 0x11	; 17
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	90 81       	ld	r25, Z
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	69 2f       	mov	r22, r25
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY , Local_u8COLUMNIdx, Local_u8ROWIdx, Local_u8PinState;
	static u8 Local_KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8COLUMNIdx=0;Local_u8COLUMNIdx<COLUMN_NUM;Local_u8COLUMNIdx++)
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	8a 83       	std	Y+2, r24	; 0x02
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	08 f4       	brcc	.+2      	; 0x1862 <Local_u8GetPressedKey+0xda>
    1860:	9e cf       	rjmp	.-196    	; 0x179e <Local_u8GetPressedKey+0x16>
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8COLUMNIdx],DIO_u8PIN_HIGH);
	}



	return Local_u8PressedKey;
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <PORT_voidInit>:
#include "PORT_Config.h"
#include "PORT_Private.h"
#include "PORT_Interface.h"

void PORT_voidInit(void)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1880:	ea e3       	ldi	r30, 0x3A	; 58
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	87 ec       	ldi	r24, 0xC7	; 199
    1886:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1888:	e7 e3       	ldi	r30, 0x37	; 55
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1890:	e4 e3       	ldi	r30, 0x34	; 52
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1898:	e1 e3       	ldi	r30, 0x31	; 49
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	10 82       	st	Z, r1
	PORTA=PORTA_INITIAL_VALUE;
    189e:	eb e3       	ldi	r30, 0x3B	; 59
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	80 83       	st	Z, r24
	PORTC=PORTC_INITIAL_VALUE;
    18ac:	e5 e3       	ldi	r30, 0x35	; 53
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    18b2:	e2 e3       	ldi	r30, 0x32	; 50
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	10 82       	st	Z, r1

}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <main>:
#define SIX  0B10000010



int main (void)
{
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	c1 59       	subi	r28, 0x91	; 145
    18cc:	d0 40       	sbci	r29, 0x00	; 0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
	u8 arr[7]={SIX,FIVE,FOUR,THREE,TWO,ONE,ZERO};
    18d8:	ce 01       	movw	r24, r28
    18da:	8d 57       	subi	r24, 0x7D	; 125
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	c3 57       	subi	r28, 0x73	; 115
    18e0:	df 4f       	sbci	r29, 0xFF	; 255
    18e2:	99 83       	std	Y+1, r25	; 0x01
    18e4:	88 83       	st	Y, r24
    18e6:	cd 58       	subi	r28, 0x8D	; 141
    18e8:	d0 40       	sbci	r29, 0x00	; 0
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	c1 57       	subi	r28, 0x71	; 113
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	99 83       	std	Y+1, r25	; 0x01
    18f4:	88 83       	st	Y, r24
    18f6:	cf 58       	subi	r28, 0x8F	; 143
    18f8:	d0 40       	sbci	r29, 0x00	; 0
    18fa:	97 e0       	ldi	r25, 0x07	; 7
    18fc:	cf 56       	subi	r28, 0x6F	; 111
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	98 83       	st	Y, r25
    1902:	c1 59       	subi	r28, 0x91	; 145
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	c1 57       	subi	r28, 0x71	; 113
    1908:	df 4f       	sbci	r29, 0xFF	; 255
    190a:	e8 81       	ld	r30, Y
    190c:	f9 81       	ldd	r31, Y+1	; 0x01
    190e:	cf 58       	subi	r28, 0x8F	; 143
    1910:	d0 40       	sbci	r29, 0x00	; 0
    1912:	00 80       	ld	r0, Z
    1914:	c1 57       	subi	r28, 0x71	; 113
    1916:	df 4f       	sbci	r29, 0xFF	; 255
    1918:	88 81       	ld	r24, Y
    191a:	99 81       	ldd	r25, Y+1	; 0x01
    191c:	cf 58       	subi	r28, 0x8F	; 143
    191e:	d0 40       	sbci	r29, 0x00	; 0
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	c1 57       	subi	r28, 0x71	; 113
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	99 83       	std	Y+1, r25	; 0x01
    1928:	88 83       	st	Y, r24
    192a:	cf 58       	subi	r28, 0x8F	; 143
    192c:	d0 40       	sbci	r29, 0x00	; 0
    192e:	c3 57       	subi	r28, 0x73	; 115
    1930:	df 4f       	sbci	r29, 0xFF	; 255
    1932:	e8 81       	ld	r30, Y
    1934:	f9 81       	ldd	r31, Y+1	; 0x01
    1936:	cd 58       	subi	r28, 0x8D	; 141
    1938:	d0 40       	sbci	r29, 0x00	; 0
    193a:	00 82       	st	Z, r0
    193c:	c3 57       	subi	r28, 0x73	; 115
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	88 81       	ld	r24, Y
    1942:	99 81       	ldd	r25, Y+1	; 0x01
    1944:	cd 58       	subi	r28, 0x8D	; 141
    1946:	d0 40       	sbci	r29, 0x00	; 0
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	c3 57       	subi	r28, 0x73	; 115
    194c:	df 4f       	sbci	r29, 0xFF	; 255
    194e:	99 83       	std	Y+1, r25	; 0x01
    1950:	88 83       	st	Y, r24
    1952:	cd 58       	subi	r28, 0x8D	; 141
    1954:	d0 40       	sbci	r29, 0x00	; 0
    1956:	cf 56       	subi	r28, 0x6F	; 111
    1958:	df 4f       	sbci	r29, 0xFF	; 255
    195a:	98 81       	ld	r25, Y
    195c:	c1 59       	subi	r28, 0x91	; 145
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	cf 56       	subi	r28, 0x6F	; 111
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	98 83       	st	Y, r25
    1968:	c1 59       	subi	r28, 0x91	; 145
    196a:	d0 40       	sbci	r29, 0x00	; 0
    196c:	cf 56       	subi	r28, 0x6F	; 111
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	e8 81       	ld	r30, Y
    1972:	c1 59       	subi	r28, 0x91	; 145
    1974:	d0 40       	sbci	r29, 0x00	; 0
    1976:	ee 23       	and	r30, r30
    1978:	31 f6       	brne	.-116    	; 0x1906 <main+0x48>
	u8 Password[3];
	u8 i, Reading, flag=0, time;
    197a:	fe 01       	movw	r30, r28
    197c:	e0 58       	subi	r30, 0x80	; 128
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	10 82       	st	Z, r1

	PORT_voidInit();
    1982:	0e 94 3c 0c 	call	0x1878	; 0x1878 <PORT_voidInit>
	CLCD_init();
    1986:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_init>
	CLCD_voidGoToXY(0,1);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidGoToXY>
	CLCD_voidSendString("Welcome To");
    1992:	80 e6       	ldi	r24, 0x60	; 96
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,1);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidGoToXY>
	CLCD_voidSendString("Password Check");
    19a2:	8b e6       	ldi	r24, 0x6B	; 107
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
    19aa:	fe 01       	movw	r30, r28
    19ac:	e5 58       	subi	r30, 0x85	; 133
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e8       	ldi	r25, 0x80	; 128
    19b4:	ab e3       	ldi	r26, 0x3B	; 59
    19b6:	b5 e4       	ldi	r27, 0x45	; 69
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	8e 01       	movw	r16, r28
    19c2:	09 58       	subi	r16, 0x89	; 137
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	e5 58       	subi	r30, 0x85	; 133
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	e9 58       	subi	r30, 0x89	; 137
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	44 f4       	brge	.+16     	; 0x1a1c <main+0x15e>
		__ticks = 1;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	eb 58       	subi	r30, 0x8B	; 139
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	64 c0       	rjmp	.+200    	; 0x1ae4 <main+0x226>
	else if (__tmp > 65535)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e9 58       	subi	r30, 0x89	; 137
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <main+0x17e>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e5 58       	subi	r30, 0x85	; 133
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	0b 58       	subi	r16, 0x8B	; 139
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <main+0x1f4>
    1a74:	fe 01       	movw	r30, r28
    1a76:	ed 58       	subi	r30, 0x8D	; 141
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 58       	subi	r30, 0x8D	; 141
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <main+0x1ce>
    1a90:	fe 01       	movw	r30, r28
    1a92:	ed 58       	subi	r30, 0x8D	; 141
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	de 01       	movw	r26, r28
    1a9c:	ab 58       	subi	r26, 0x8B	; 139
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	eb 58       	subi	r30, 0x8B	; 139
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	eb 58       	subi	r30, 0x8B	; 139
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	d1 f6       	brne	.-76     	; 0x1a74 <main+0x1b6>
    1ac0:	27 c0       	rjmp	.+78     	; 0x1b10 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	0b 58       	subi	r16, 0x8B	; 139
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e9 58       	subi	r30, 0x89	; 137
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	de 01       	movw	r26, r28
    1ae6:	af 58       	subi	r26, 0x8F	; 143
    1ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	eb 58       	subi	r30, 0x8B	; 139
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
    1af4:	8d 93       	st	X+, r24
    1af6:	9c 93       	st	X, r25
    1af8:	fe 01       	movw	r30, r28
    1afa:	ef 58       	subi	r30, 0x8F	; 143
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <main+0x244>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 58       	subi	r30, 0x8F	; 143
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
	_delay_ms(3000);
	CLCD_voidDisplayClear();
    1b10:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>


	CLCD_voidGoToXY(0,1);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidGoToXY>
	CLCD_voidSendString("Password:");
    1b1c:	8a e7       	ldi	r24, 0x7A	; 122
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>




	while (1){
			for (i=0;i<3;i++){
    1b24:	fe 01       	movw	r30, r28
    1b26:	ee 57       	subi	r30, 0x7E	; 126
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	10 82       	st	Z, r1
    1b2c:	45 c0       	rjmp	.+138    	; 0x1bb8 <main+0x2fa>
				Reading =Local_u8GetPressedKey();
    1b2e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Local_u8GetPressedKey>
    1b32:	fe 01       	movw	r30, r28
    1b34:	ef 57       	subi	r30, 0x7F	; 127
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 83       	st	Z, r24
				if (Reading != 0xff){
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ef 57       	subi	r30, 0x7F	; 127
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 3f       	cpi	r24, 0xFF	; 255
    1b44:	09 f1       	breq	.+66     	; 0x1b88 <main+0x2ca>
				Password[i]=Reading;
    1b46:	fe 01       	movw	r30, r28
    1b48:	ee 57       	subi	r30, 0x7E	; 126
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	ce 01       	movw	r24, r28
    1b54:	86 57       	subi	r24, 0x76	; 118
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	dc 01       	movw	r26, r24
    1b5a:	a2 0f       	add	r26, r18
    1b5c:	b3 1f       	adc	r27, r19
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ef 57       	subi	r30, 0x7F	; 127
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	8c 93       	st	X, r24
				// SHIFT LCD

				CLCD_voidSendData(Password[i]);
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ee 57       	subi	r30, 0x7E	; 126
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	ce 01       	movw	r24, r28
    1b76:	86 57       	subi	r24, 0x76	; 118
    1b78:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e2 0f       	add	r30, r18
    1b7e:	f3 1f       	adc	r31, r19
    1b80:	80 81       	ld	r24, Z
    1b82:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <main+0x2e8>
				}
				else if (Reading == 0xff){
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ef 57       	subi	r30, 0x7F	; 127
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 3f       	cpi	r24, 0xFF	; 255
    1b92:	49 f4       	brne	.+18     	; 0x1ba6 <main+0x2e8>
					i--;
    1b94:	de 01       	movw	r26, r28
    1b96:	ae 57       	subi	r26, 0x7E	; 126
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ee 57       	subi	r30, 0x7E	; 126
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 50       	subi	r24, 0x01	; 1
    1ba4:	8c 93       	st	X, r24




	while (1){
			for (i=0;i<3;i++){
    1ba6:	de 01       	movw	r26, r28
    1ba8:	ae 57       	subi	r26, 0x7E	; 126
    1baa:	bf 4f       	sbci	r27, 0xFF	; 255
    1bac:	fe 01       	movw	r30, r28
    1bae:	ee 57       	subi	r30, 0x7E	; 126
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	8c 93       	st	X, r24
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ee 57       	subi	r30, 0x7E	; 126
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <main+0x308>
    1bc4:	b4 cf       	rjmp	.-152    	; 0x1b2e <main+0x270>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e3 59       	subi	r30, 0x93	; 147
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	aa ef       	ldi	r26, 0xFA	; 250
    1bd2:	b4 e4       	ldi	r27, 0x44	; 68
    1bd4:	80 83       	st	Z, r24
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	a2 83       	std	Z+2, r26	; 0x02
    1bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	8e 01       	movw	r16, r28
    1bde:	07 59       	subi	r16, 0x97	; 151
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e3 59       	subi	r30, 0x93	; 147
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a ef       	ldi	r20, 0xFA	; 250
    1bf6:	54 e4       	ldi	r21, 0x44	; 68
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	f8 01       	movw	r30, r16
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 59       	subi	r30, 0x97	; 151
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	44 f4       	brge	.+16     	; 0x1c38 <main+0x37a>
		__ticks = 1;
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e9 59       	subi	r30, 0x99	; 153
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	64 c0       	rjmp	.+200    	; 0x1d00 <main+0x442>
	else if (__tmp > 65535)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 59       	subi	r30, 0x97	; 151
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <main+0x39a>
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <main+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e3 59       	subi	r30, 0x93	; 147
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8e 01       	movw	r16, r28
    1c78:	09 59       	subi	r16, 0x99	; 153
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	1f c0       	rjmp	.+62     	; 0x1cce <main+0x410>
    1c90:	fe 01       	movw	r30, r28
    1c92:	eb 59       	subi	r30, 0x9B	; 155
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	88 ec       	ldi	r24, 0xC8	; 200
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	eb 59       	subi	r30, 0x9B	; 155
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <main+0x3ea>
    1cac:	fe 01       	movw	r30, r28
    1cae:	eb 59       	subi	r30, 0x9B	; 155
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	de 01       	movw	r26, r28
    1cb8:	a9 59       	subi	r26, 0x99	; 153
    1cba:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e9 59       	subi	r30, 0x99	; 153
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e9 59       	subi	r30, 0x99	; 153
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	d1 f6       	brne	.-76     	; 0x1c90 <main+0x3d2>
    1cdc:	28 c0       	rjmp	.+80     	; 0x1d2e <main+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	09 59       	subi	r16, 0x99	; 153
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e7 59       	subi	r30, 0x97	; 151
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	de 01       	movw	r26, r28
    1d02:	ad 59       	subi	r26, 0x9D	; 157
    1d04:	bf 4f       	sbci	r27, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e9 59       	subi	r30, 0x99	; 153
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	11 96       	adiw	r26, 0x01	; 1
    1d12:	9c 93       	st	X, r25
    1d14:	8e 93       	st	-X, r24
    1d16:	fe 01       	movw	r30, r28
    1d18:	ed 59       	subi	r30, 0x9D	; 157
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <main+0x462>
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 59       	subi	r30, 0x9D	; 157
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24

//PASSWORD CHECK

			//Check=Password_Check(&Password[0]);

			if ((Password[0]=='1') && (Password[1]=='3') && (Password[2]=='3') ){
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e6 57       	subi	r30, 0x76	; 118
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	81 33       	cpi	r24, 0x31	; 49
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <main+0x47e>
    1d3a:	c6 c2       	rjmp	.+1420   	; 0x22c8 <main+0xa0a>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e6 57       	subi	r30, 0x76	; 118
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	81 81       	ldd	r24, Z+1	; 0x01
    1d44:	83 33       	cpi	r24, 0x33	; 51
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <main+0x48c>
    1d48:	bf c2       	rjmp	.+1406   	; 0x22c8 <main+0xa0a>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e6 57       	subi	r30, 0x76	; 118
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	83 33       	cpi	r24, 0x33	; 51
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <main+0x49a>
    1d56:	b8 c2       	rjmp	.+1392   	; 0x22c8 <main+0xa0a>
				CLCD_voidDisplayClear();
    1d58:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e1 5a       	subi	r30, 0xA1	; 161
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	aa e7       	ldi	r26, 0x7A	; 122
    1d68:	b4 e4       	ldi	r27, 0x44	; 68
    1d6a:	80 83       	st	Z, r24
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	a2 83       	std	Z+2, r26	; 0x02
    1d70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	8e 01       	movw	r16, r28
    1d74:	05 5a       	subi	r16, 0xA5	; 165
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e1 5a       	subi	r30, 0xA1	; 161
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da0:	fe 01       	movw	r30, r28
    1da2:	e5 5a       	subi	r30, 0xA5	; 165
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	44 f4       	brge	.+16     	; 0x1dce <main+0x510>
		__ticks = 1;
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5a       	subi	r30, 0xA7	; 167
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	64 c0       	rjmp	.+200    	; 0x1e96 <main+0x5d8>
	else if (__tmp > 65535)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5a       	subi	r30, 0xA5	; 165
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <main+0x530>
    1dec:	43 c0       	rjmp	.+134    	; 0x1e74 <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	fe 01       	movw	r30, r28
    1df0:	e1 5a       	subi	r30, 0xA1	; 161
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	07 5a       	subi	r16, 0xA7	; 167
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	1f c0       	rjmp	.+62     	; 0x1e64 <main+0x5a6>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e9 5a       	subi	r30, 0xA9	; 169
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	fe 01       	movw	r30, r28
    1e36:	e9 5a       	subi	r30, 0xA9	; 169
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <main+0x580>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e9 5a       	subi	r30, 0xA9	; 169
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	de 01       	movw	r26, r28
    1e4e:	a7 5a       	subi	r26, 0xA7	; 167
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5a       	subi	r30, 0xA7	; 167
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	fe 01       	movw	r30, r28
    1e66:	e7 5a       	subi	r30, 0xA7	; 167
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	d1 f6       	brne	.-76     	; 0x1e26 <main+0x568>
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <main+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	8e 01       	movw	r16, r28
    1e76:	07 5a       	subi	r16, 0xA7	; 167
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e5 5a       	subi	r30, 0xA5	; 165
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	f8 01       	movw	r30, r16
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	de 01       	movw	r26, r28
    1e98:	ab 5a       	subi	r26, 0xAB	; 171
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	8d 93       	st	X+, r24
    1ea8:	9c 93       	st	X, r25
    1eaa:	fe 01       	movw	r30, r28
    1eac:	eb 5a       	subi	r30, 0xAB	; 171
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <main+0x5f6>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	eb 5a       	subi	r30, 0xAB	; 171
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
				_delay_ms(1000);
				CLCD_voidSendString("Password Right");
    1ec2:	84 e8       	ldi	r24, 0x84	; 132
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
				DIO_u8SetPinValue(DIO_u8PORTA , DIO_u8PIN5 , DIO_u8PIN_HIGH);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	65 e0       	ldi	r22, 0x05	; 5
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ef 5a       	subi	r30, 0xAF	; 175
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e8       	ldi	r25, 0x80	; 128
    1ede:	ab e3       	ldi	r26, 0x3B	; 59
    1ee0:	b5 e4       	ldi	r27, 0x45	; 69
    1ee2:	80 83       	st	Z, r24
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	a2 83       	std	Z+2, r26	; 0x02
    1ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	8e 01       	movw	r16, r28
    1eec:	03 5b       	subi	r16, 0xB3	; 179
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ef 5a       	subi	r30, 0xAF	; 175
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 83       	st	Z, r24
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	a2 83       	std	Z+2, r26	; 0x02
    1f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e3 5b       	subi	r30, 0xB3	; 179
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	44 f4       	brge	.+16     	; 0x1f46 <main+0x688>
		__ticks = 1;
    1f36:	fe 01       	movw	r30, r28
    1f38:	e5 5b       	subi	r30, 0xB5	; 181
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    1f44:	64 c0       	rjmp	.+200    	; 0x200e <main+0x750>
	else if (__tmp > 65535)
    1f46:	fe 01       	movw	r30, r28
    1f48:	e3 5b       	subi	r30, 0xB3	; 179
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	0c f0       	brlt	.+2      	; 0x1f66 <main+0x6a8>
    1f64:	43 c0       	rjmp	.+134    	; 0x1fec <main+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	fe 01       	movw	r30, r28
    1f68:	ef 5a       	subi	r30, 0xAF	; 175
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8e 01       	movw	r16, r28
    1f86:	05 5b       	subi	r16, 0xB5	; 181
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	f8 01       	movw	r30, r16
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
    1f9c:	1f c0       	rjmp	.+62     	; 0x1fdc <main+0x71e>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e7 5b       	subi	r30, 0xB7	; 183
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 5b       	subi	r30, 0xB7	; 183
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <main+0x6f8>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e7 5b       	subi	r30, 0xB7	; 183
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	de 01       	movw	r26, r28
    1fc6:	a5 5b       	subi	r26, 0xB5	; 181
    1fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e5 5b       	subi	r30, 0xB5	; 181
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e5 5b       	subi	r30, 0xB5	; 181
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	d1 f6       	brne	.-76     	; 0x1f9e <main+0x6e0>
    1fea:	27 c0       	rjmp	.+78     	; 0x203a <main+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	8e 01       	movw	r16, r28
    1fee:	05 5b       	subi	r16, 0xB5	; 181
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 5b       	subi	r30, 0xB3	; 179
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	de 01       	movw	r26, r28
    2010:	a9 5b       	subi	r26, 0xB9	; 185
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e5 5b       	subi	r30, 0xB5	; 181
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	8d 93       	st	X+, r24
    2020:	9c 93       	st	X, r25
    2022:	fe 01       	movw	r30, r28
    2024:	e9 5b       	subi	r30, 0xB9	; 185
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0x76e>
    2030:	fe 01       	movw	r30, r28
    2032:	e9 5b       	subi	r30, 0xB9	; 185
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
				_delay_ms(3000);
				CLCD_voidDisplayClear();
    203a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
				CLCD_voidSendString("Welcome");
    203e:	83 e9       	ldi	r24, 0x93	; 147
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
    2046:	fe 01       	movw	r30, r28
    2048:	ed 5b       	subi	r30, 0xBD	; 189
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e8       	ldi	r25, 0x80	; 128
    2050:	ab e3       	ldi	r26, 0x3B	; 59
    2052:	b5 e4       	ldi	r27, 0x45	; 69
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205c:	8e 01       	movw	r16, r28
    205e:	01 5c       	subi	r16, 0xC1	; 193
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	ed 5b       	subi	r30, 0xBD	; 189
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	80 83       	st	Z, r24
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208a:	fe 01       	movw	r30, r28
    208c:	ff 96       	adiw	r30, 0x3f	; 63
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <main+0x7f2>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9e af       	std	Y+62, r25	; 0x3e
    20ac:	8d af       	std	Y+61, r24	; 0x3d
    20ae:	46 c0       	rjmp	.+140    	; 0x213c <main+0x87e>
	else if (__tmp > 65535)
    20b0:	fe 01       	movw	r30, r28
    20b2:	ff 96       	adiw	r30, 0x3f	; 63
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	64 f5       	brge	.+88     	; 0x2124 <main+0x866>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	fe 01       	movw	r30, r28
    20ce:	ed 5b       	subi	r30, 0xBD	; 189
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e af       	std	Y+62, r25	; 0x3e
    20f8:	8d af       	std	Y+61, r24	; 0x3d
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <main+0x85c>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c af       	std	Y+60, r25	; 0x3c
    2102:	8b af       	std	Y+59, r24	; 0x3b
    2104:	8b ad       	ldd	r24, Y+59	; 0x3b
    2106:	9c ad       	ldd	r25, Y+60	; 0x3c
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <main+0x84a>
    210c:	9c af       	std	Y+60, r25	; 0x3c
    210e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d ad       	ldd	r24, Y+61	; 0x3d
    2112:	9e ad       	ldd	r25, Y+62	; 0x3e
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e af       	std	Y+62, r25	; 0x3e
    2118:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d ad       	ldd	r24, Y+61	; 0x3d
    211c:	9e ad       	ldd	r25, Y+62	; 0x3e
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <main+0x83e>
    2122:	16 c0       	rjmp	.+44     	; 0x2150 <main+0x892>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	fe 01       	movw	r30, r28
    2126:	ff 96       	adiw	r30, 0x3f	; 63
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e af       	std	Y+62, r25	; 0x3e
    213a:	8d af       	std	Y+61, r24	; 0x3d
    213c:	8d ad       	ldd	r24, Y+61	; 0x3d
    213e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2140:	9a af       	std	Y+58, r25	; 0x3a
    2142:	89 af       	std	Y+57, r24	; 0x39
    2144:	89 ad       	ldd	r24, Y+57	; 0x39
    2146:	9a ad       	ldd	r25, Y+58	; 0x3a
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <main+0x88a>
    214c:	9a af       	std	Y+58, r25	; 0x3a
    214e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(3000);
				CLCD_voidDisplayClear();
    2150:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
				DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	66 e0       	ldi	r22, 0x06	; 6
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
				CLCD_voidSendString("Door Close");
    215e:	8b e9       	ldi	r24, 0x9B	; 155
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidGoToXY>
				CLCD_voidSendString("After 6 sec");
    216e:	86 ea       	ldi	r24, 0xA6	; 166
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>

				for (time=0;time<7;time++){
    2176:	fe 01       	movw	r30, r28
    2178:	e1 58       	subi	r30, 0x81	; 129
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	10 82       	st	Z, r1
    217e:	8c c0       	rjmp	.+280    	; 0x2298 <main+0x9da>
					DIO_u8SetPortValue(DIO_u8PORTC,arr[time]);
    2180:	fe 01       	movw	r30, r28
    2182:	e1 58       	subi	r30, 0x81	; 129
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	ce 01       	movw	r24, r28
    218e:	8d 57       	subi	r24, 0x7D	; 125
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	fc 01       	movw	r30, r24
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	90 81       	ld	r25, Z
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	69 2f       	mov	r22, r25
    219e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_u8SetPortValue>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	aa e7       	ldi	r26, 0x7A	; 122
    21a8:	b4 e4       	ldi	r27, 0x44	; 68
    21aa:	8d ab       	std	Y+53, r24	; 0x35
    21ac:	9e ab       	std	Y+54, r25	; 0x36
    21ae:	af ab       	std	Y+55, r26	; 0x37
    21b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6d a9       	ldd	r22, Y+53	; 0x35
    21b4:	7e a9       	ldd	r23, Y+54	; 0x36
    21b6:	8f a9       	ldd	r24, Y+55	; 0x37
    21b8:	98 ad       	ldd	r25, Y+56	; 0x38
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	89 ab       	std	Y+49, r24	; 0x31
    21cc:	9a ab       	std	Y+50, r25	; 0x32
    21ce:	ab ab       	std	Y+51, r26	; 0x33
    21d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21d2:	69 a9       	ldd	r22, Y+49	; 0x31
    21d4:	7a a9       	ldd	r23, Y+50	; 0x32
    21d6:	8b a9       	ldd	r24, Y+51	; 0x33
    21d8:	9c a9       	ldd	r25, Y+52	; 0x34
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <main+0x936>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <main+0x9b4>
	else if (__tmp > 65535)
    21f4:	69 a9       	ldd	r22, Y+49	; 0x31
    21f6:	7a a9       	ldd	r23, Y+50	; 0x32
    21f8:	8b a9       	ldd	r24, Y+51	; 0x33
    21fa:	9c a9       	ldd	r25, Y+52	; 0x34
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <main+0x9a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6d a9       	ldd	r22, Y+53	; 0x35
    220e:	7e a9       	ldd	r23, Y+54	; 0x36
    2210:	8f a9       	ldd	r24, Y+55	; 0x37
    2212:	98 ad       	ldd	r25, Y+56	; 0x38
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <main+0x996>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e a7       	std	Y+46, r25	; 0x2e
    223c:	8d a7       	std	Y+45, r24	; 0x2d
    223e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2240:	9e a5       	ldd	r25, Y+46	; 0x2e
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <main+0x984>
    2246:	9e a7       	std	Y+46, r25	; 0x2e
    2248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8f a5       	ldd	r24, Y+47	; 0x2f
    224c:	98 a9       	ldd	r25, Y+48	; 0x30
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	98 ab       	std	Y+48, r25	; 0x30
    2252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <main+0x978>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <main+0x9c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	69 a9       	ldd	r22, Y+49	; 0x31
    2260:	7a a9       	ldd	r23, Y+50	; 0x32
    2262:	8b a9       	ldd	r24, Y+51	; 0x33
    2264:	9c a9       	ldd	r25, Y+52	; 0x34
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	98 ab       	std	Y+48, r25	; 0x30
    2270:	8f a7       	std	Y+47, r24	; 0x2f
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	9c a7       	std	Y+44, r25	; 0x2c
    2278:	8b a7       	std	Y+43, r24	; 0x2b
    227a:	8b a5       	ldd	r24, Y+43	; 0x2b
    227c:	9c a5       	ldd	r25, Y+44	; 0x2c
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <main+0x9c0>
    2282:	9c a7       	std	Y+44, r25	; 0x2c
    2284:	8b a7       	std	Y+43, r24	; 0x2b
				DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
				CLCD_voidSendString("Door Close");
				CLCD_voidGoToXY(1,0);
				CLCD_voidSendString("After 6 sec");

				for (time=0;time<7;time++){
    2286:	de 01       	movw	r26, r28
    2288:	a1 58       	subi	r26, 0x81	; 129
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e1 58       	subi	r30, 0x81	; 129
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	8c 93       	st	X, r24
    2298:	fe 01       	movw	r30, r28
    229a:	e1 58       	subi	r30, 0x81	; 129
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	87 30       	cpi	r24, 0x07	; 7
    22a2:	08 f4       	brcc	.+2      	; 0x22a6 <main+0x9e8>
    22a4:	6d cf       	rjmp	.-294    	; 0x2180 <main+0x8c2>
					DIO_u8SetPortValue(DIO_u8PORTC,arr[time]);
					_delay_ms(1000);
				}
				DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	66 e0       	ldi	r22, 0x06	; 6
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	65 e0       	ldi	r22, 0x05	; 5
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
				CLCD_voidDisplayClear();
    22ba:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
				CLCD_voidSendString("Password:");
    22be:	8a e7       	ldi	r24, 0x7A	; 122
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
    22c6:	82 c1       	rjmp	.+772    	; 0x25cc <main+0xd0e>


		}
			else {
				CLCD_voidDisplayClear();
    22c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	aa e7       	ldi	r26, 0x7A	; 122
    22d2:	b4 e4       	ldi	r27, 0x44	; 68
    22d4:	8f a3       	std	Y+39, r24	; 0x27
    22d6:	98 a7       	std	Y+40, r25	; 0x28
    22d8:	a9 a7       	std	Y+41, r26	; 0x29
    22da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6f a1       	ldd	r22, Y+39	; 0x27
    22de:	78 a5       	ldd	r23, Y+40	; 0x28
    22e0:	89 a5       	ldd	r24, Y+41	; 0x29
    22e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8b a3       	std	Y+35, r24	; 0x23
    22f6:	9c a3       	std	Y+36, r25	; 0x24
    22f8:	ad a3       	std	Y+37, r26	; 0x25
    22fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22fc:	6b a1       	ldd	r22, Y+35	; 0x23
    22fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2300:	8d a1       	ldd	r24, Y+37	; 0x25
    2302:	9e a1       	ldd	r25, Y+38	; 0x26
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <main+0xa60>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
    231c:	3f c0       	rjmp	.+126    	; 0x239c <main+0xade>
	else if (__tmp > 65535)
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <main+0xaca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6f a1       	ldd	r22, Y+39	; 0x27
    2338:	78 a5       	ldd	r23, Y+40	; 0x28
    233a:	89 a5       	ldd	r24, Y+41	; 0x29
    233c:	9a a5       	ldd	r25, Y+42	; 0x2a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9a a3       	std	Y+34, r25	; 0x22
    235c:	89 a3       	std	Y+33, r24	; 0x21
    235e:	0f c0       	rjmp	.+30     	; 0x237e <main+0xac0>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	98 a3       	std	Y+32, r25	; 0x20
    2366:	8f 8f       	std	Y+31, r24	; 0x1f
    2368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    236a:	98 a1       	ldd	r25, Y+32	; 0x20
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <main+0xaae>
    2370:	98 a3       	std	Y+32, r25	; 0x20
    2372:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	89 a1       	ldd	r24, Y+33	; 0x21
    2376:	9a a1       	ldd	r25, Y+34	; 0x22
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9a a3       	std	Y+34, r25	; 0x22
    237c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	89 a1       	ldd	r24, Y+33	; 0x21
    2380:	9a a1       	ldd	r25, Y+34	; 0x22
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <main+0xaa2>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <main+0xaf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6b a1       	ldd	r22, Y+35	; 0x23
    238a:	7c a1       	ldd	r23, Y+36	; 0x24
    238c:	8d a1       	ldd	r24, Y+37	; 0x25
    238e:	9e a1       	ldd	r25, Y+38	; 0x26
    2390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	89 a1       	ldd	r24, Y+33	; 0x21
    239e:	9a a1       	ldd	r25, Y+34	; 0x22
    23a0:	9e 8f       	std	Y+30, r25	; 0x1e
    23a2:	8d 8f       	std	Y+29, r24	; 0x1d
    23a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <main+0xaea>
    23ac:	9e 8f       	std	Y+30, r25	; 0x1e
    23ae:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				CLCD_voidSendString("Password Wrong");
    23b0:	82 eb       	ldi	r24, 0xB2	; 178
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
				flag++;
    23b8:	de 01       	movw	r26, r28
    23ba:	a0 58       	subi	r26, 0x80	; 128
    23bc:	bf 4f       	sbci	r27, 0xFF	; 255
    23be:	fe 01       	movw	r30, r28
    23c0:	e0 58       	subi	r30, 0x80	; 128
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	8c 93       	st	X, r24
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e8       	ldi	r25, 0x80	; 128
    23ce:	ab e3       	ldi	r26, 0x3B	; 59
    23d0:	b5 e4       	ldi	r27, 0x45	; 69
    23d2:	89 8f       	std	Y+25, r24	; 0x19
    23d4:	9a 8f       	std	Y+26, r25	; 0x1a
    23d6:	ab 8f       	std	Y+27, r26	; 0x1b
    23d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	69 8d       	ldd	r22, Y+25	; 0x19
    23dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8d 8b       	std	Y+21, r24	; 0x15
    23f4:	9e 8b       	std	Y+22, r25	; 0x16
    23f6:	af 8b       	std	Y+23, r26	; 0x17
    23f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <main+0xb5e>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	3f c0       	rjmp	.+126    	; 0x249a <main+0xbdc>
	else if (__tmp > 65535)
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <main+0xbc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	0f c0       	rjmp	.+30     	; 0x247c <main+0xbbe>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9a 8b       	std	Y+18, r25	; 0x12
    2464:	89 8b       	std	Y+17, r24	; 0x11
    2466:	89 89       	ldd	r24, Y+17	; 0x11
    2468:	9a 89       	ldd	r25, Y+18	; 0x12
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <main+0xbac>
    246e:	9a 8b       	std	Y+18, r25	; 0x12
    2470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <main+0xba0>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <main+0xbf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	98 8b       	std	Y+16, r25	; 0x10
    24a0:	8f 87       	std	Y+15, r24	; 0x0f
    24a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a4:	98 89       	ldd	r25, Y+16	; 0x10
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <main+0xbe8>
    24aa:	98 8b       	std	Y+16, r25	; 0x10
    24ac:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);
				CLCD_voidDisplayClear();
    24ae:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>

				if (flag == 2){
    24b2:	fe 01       	movw	r30, r28
    24b4:	e0 58       	subi	r30, 0x80	; 128
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	82 30       	cpi	r24, 0x02	; 2
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <main+0xc0a>
					CLCD_voidSendString("Last Try");
    24be:	81 ec       	ldi	r24, 0xC1	; 193
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <main+0xc1e>
				}
				else if (flag < 2){
    24c8:	fe 01       	movw	r30, r28
    24ca:	e0 58       	subi	r30, 0x80	; 128
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	82 30       	cpi	r24, 0x02	; 2
    24d2:	20 f4       	brcc	.+8      	; 0x24dc <main+0xc1e>
					CLCD_voidSendString("Try Again");
    24d4:	8a ec       	ldi	r24, 0xCA	; 202
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e8       	ldi	r25, 0x80	; 128
    24e0:	ab e3       	ldi	r26, 0x3B	; 59
    24e2:	b5 e4       	ldi	r27, 0x45	; 69
    24e4:	8b 87       	std	Y+11, r24	; 0x0b
    24e6:	9c 87       	std	Y+12, r25	; 0x0c
    24e8:	ad 87       	std	Y+13, r26	; 0x0d
    24ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a ef       	ldi	r20, 0xFA	; 250
    24fa:	54 e4       	ldi	r21, 0x44	; 68
    24fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8f 83       	std	Y+7, r24	; 0x07
    2506:	98 87       	std	Y+8, r25	; 0x08
    2508:	a9 87       	std	Y+9, r26	; 0x09
    250a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <main+0xc70>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <main+0xcee>
	else if (__tmp > 65535)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <main+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	6b 85       	ldd	r22, Y+11	; 0x0b
    2548:	7c 85       	ldd	r23, Y+12	; 0x0c
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	0f c0       	rjmp	.+30     	; 0x258e <main+0xcd0>
    2570:	88 ec       	ldi	r24, 0xC8	; 200
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <main+0xcbe>
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <main+0xcb2>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <main+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <main+0xcfa>
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
				}

				_delay_ms(3000);
				CLCD_voidDisplayClear();
    25c0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
				CLCD_voidSendString("Password:");
    25c4:	8a e7       	ldi	r24, 0x7A	; 122
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>


					}
			if (flag == 3){
    25cc:	fe 01       	movw	r30, r28
    25ce:	e0 58       	subi	r30, 0x80	; 128
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	83 30       	cpi	r24, 0x03	; 3
    25d6:	09 f0       	breq	.+2      	; 0x25da <main+0xd1c>
    25d8:	a5 ca       	rjmp	.-2742   	; 0x1b24 <main+0x266>

				CLCD_voidDisplayClear();
    25da:	0e 94 6e 08 	call	0x10dc	; 0x10dc <CLCD_voidDisplayClear>
				CLCD_voidSendString("Buzzer Alerted");
    25de:	84 ed       	ldi	r24, 0xD4	; 212
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_voidSendString>
				DIO_u8SetPinValue(DIO_u8PORTA , DIO_u8PIN7 , DIO_u8PIN_HIGH);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	67 e0       	ldi	r22, 0x07	; 7
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8SetPinValue>
    25f0:	99 ca       	rjmp	.-2766   	; 0x1b24 <main+0x266>

000025f2 <__prologue_saves__>:
    25f2:	2f 92       	push	r2
    25f4:	3f 92       	push	r3
    25f6:	4f 92       	push	r4
    25f8:	5f 92       	push	r5
    25fa:	6f 92       	push	r6
    25fc:	7f 92       	push	r7
    25fe:	8f 92       	push	r8
    2600:	9f 92       	push	r9
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	ca 1b       	sub	r28, r26
    261c:	db 0b       	sbc	r29, r27
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	09 94       	ijmp

0000262a <__epilogue_restores__>:
    262a:	2a 88       	ldd	r2, Y+18	; 0x12
    262c:	39 88       	ldd	r3, Y+17	; 0x11
    262e:	48 88       	ldd	r4, Y+16	; 0x10
    2630:	5f 84       	ldd	r5, Y+15	; 0x0f
    2632:	6e 84       	ldd	r6, Y+14	; 0x0e
    2634:	7d 84       	ldd	r7, Y+13	; 0x0d
    2636:	8c 84       	ldd	r8, Y+12	; 0x0c
    2638:	9b 84       	ldd	r9, Y+11	; 0x0b
    263a:	aa 84       	ldd	r10, Y+10	; 0x0a
    263c:	b9 84       	ldd	r11, Y+9	; 0x09
    263e:	c8 84       	ldd	r12, Y+8	; 0x08
    2640:	df 80       	ldd	r13, Y+7	; 0x07
    2642:	ee 80       	ldd	r14, Y+6	; 0x06
    2644:	fd 80       	ldd	r15, Y+5	; 0x05
    2646:	0c 81       	ldd	r16, Y+4	; 0x04
    2648:	1b 81       	ldd	r17, Y+3	; 0x03
    264a:	aa 81       	ldd	r26, Y+2	; 0x02
    264c:	b9 81       	ldd	r27, Y+1	; 0x01
    264e:	ce 0f       	add	r28, r30
    2650:	d1 1d       	adc	r29, r1
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	ed 01       	movw	r28, r26
    265e:	08 95       	ret

00002660 <_exit>:
    2660:	f8 94       	cli

00002662 <__stop_program>:
    2662:	ff cf       	rjmp	.-2      	; 0x2662 <__stop_program>
